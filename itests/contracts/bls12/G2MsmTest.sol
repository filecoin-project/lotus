// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract G2MsmTest {
    function callOk(address pc, bytes memory input, uint256 expectedLen) internal view returns (bytes memory) {
        (bool ok, bytes memory out) = pc.staticcall(input);
        require(ok, "precompile reverted");
        require(out.length == expectedLen, "unexpected return length");
        return out;
    }

    function expectRevert(address pc, bytes memory input) internal view {
        (bool ok, ) = pc.staticcall(input);
        require(!ok, "expected revert");
    }

    function expectEq(bytes memory a, bytes memory b, string memory what) internal pure {
        require(keccak256(a) == keccak256(b), what);
    }

    address constant PRECOMPILE = 0x000000000000000000000000000000000000000E; // BLS12_G2MSM
    uint256 constant OUT_LEN = 256;

    // Vector: (g2, 2) -> 2*g2
    bytes constant INPUT_G2_2X = hex"00000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be0000000000000000000000000000000000000000000000000000000000000002";
    bytes constant EXPECT_G2_2X = hex"000000000000000000000000000000001638533957d540a9d2370f17cc7ed5863bc0b995b8825e0ee1ea1e1e4d00dbae81f14b0bf3611b78c952aacab827a053000000000000000000000000000000000a4edef9c1ed7f729f520e47730a124fd70662a904ba1074728114d1031e1572c6c886f6b57ec72a6178288c47c33577000000000000000000000000000000000468fb440d82b0630aeb8dca2b5256789a66da69bf91009cbfe6bd221e47aa8ae88dece9764bf3bd999d95d71e4c9899000000000000000000000000000000000f6d4552fa65dd2638b361543f887136a43253d9c66c411697003f7a13c308f5422e1aa0a59c8967acdefd8b6e36ccf3";
    // Vector: 1*g2 = g2
    bytes constant INPUT_G2_1X = hex"00000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be0000000000000000000000000000000000000000000000000000000000000001";
    bytes constant EXPECT_G2_1X = hex"00000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be";
    // Vector: 0*g2 = inf
    bytes constant INPUT_G2_0X = hex"00000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be0000000000000000000000000000000000000000000000000000000000000000";
    bytes constant EXPECT_INF_G2 = hex"00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    // Vector: x*inf = inf
    bytes constant INPUT_X_INF = hex
    // 2g2 + inf -> 2*g2
    bytes constant INPUT_2G2_PLUS_INF = hex"00000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be
    bytes constant EXPECT_2G2_PLUS_INF = hex"000000000000000000000000000000001638533957d540a9d2370f17cc7ed5863bc0b995b8825e0ee1ea1e1e4d00dbae81f14b0bf3611b78c952aacab827a053000000000000000000000000000000000a4edef9c1ed7f729f520e47730a124fd70662a904ba1074728114d1031e1572c6c886f6b57ec72a6178288c47c33577000000000000000000000000000000000468fb440d82b0630aeb8dca2b5256789a66da69bf91009cbfe6bd221e47aa8ae88dece9764bf3bd999d95d71e4c9899000000000000000000000000000000000f6d4552fa65dd2638b361543f887136a43253d9c66c411697003f7a13c308f5422e1aa0a59c8967acdefd8b6e36ccf3";

    function runTests() public view {
        // Positive: MSM with single pair equals scalar mul
        bytes memory out1 = callOk(PRECOMPILE, INPUT_G2_2X, OUT_LEN);
        expectEq(out1, EXPECT_G2_2X, "g2msm 2x mismatch");

        // Additional positives
        bytes memory out2 = callOk(PRECOMPILE, INPUT_G2_1X, OUT_LEN);
        expectEq(out2, EXPECT_G2_1X, "g2msm 1x mismatch");

        bytes memory out3 = callOk(PRECOMPILE, INPUT_G2_0X, OUT_LEN);
        expectEq(out3, EXPECT_INF_G2, "g2msm 0x != inf");

        bytes memory out4 = callOk(PRECOMPILE, INPUT_X_INF, OUT_LEN);
        expectEq(out4, EXPECT_INF_G2, "g2msm x*inf != inf");

        bytes memory out5 = callOk(PRECOMPILE, INPUT_2G2_PLUS_INF, OUT_LEN);
        expectEq(out5, EXPECT_2G2_PLUS_INF, "g2msm 2g2+inf mismatch");

        // Negative: empty input should revert
        expectRevert(PRECOMPILE, hex"");
    }
}
