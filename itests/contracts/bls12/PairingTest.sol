// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract PairingTest {
    function callOk(address pc, bytes memory input, uint256 expectedLen) internal view returns (bytes memory) {
        (bool ok, bytes memory out) = pc.staticcall(input);
        require(ok, "precompile reverted");
        require(out.length == expectedLen, "unexpected return length");
        return out;
    }

    function expectRevert(address pc, bytes memory input) internal view {
        (bool ok, ) = pc.staticcall(input);
        require(!ok, "expected revert");
    }

    function expectEq(bytes memory a, bytes memory b, string memory what) internal pure {
        require(keccak256(a) == keccak256(b), what);
    }

    address constant PRECOMPILE = 0x000000000000000000000000000000000000000F; // BLS12_PAIRING_CHECK
    uint256 constant OUT_LEN = 32;

    // Vector: e(0, G2) -> 1 (last byte = 0x01)
    bytes constant INPUT_E_0_G2 = hex"000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be";
    bytes constant EXPECT_TRUE = hex"0000000000000000000000000000000000000000000000000000000000000001";
    bytes constant EXPECT_FALSE = hex"0000000000000000000000000000000000000000000000000000000000000000";
    // Vector: e(G1, 0) -> 1
    bytes constant INPUT_E_G1_0 = hex"0000000000000000000000000000000017f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb0000000000000000000000000000000008b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e
    // Vector: non-degeneracy -> expect 0
    bytes constant INPUT_NON_DEGENERATE = hex"0000000000000000000000000000000017f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb0000000000000000000000000000000008b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e100000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be";
    // Vector: e(G1,G2)*e(0,0)*e(G1,G2) -> 0
    bytes constant INPUT_PRODUCT_FALSE = hex"0000000000000000000000000000000017f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb0000000000000000000000000000000008b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e100000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79bef1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb0000000000000000000000000000000008b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e100000000000000000000000000000000024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb80000000000000000000000000000000013e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e000000000000000000000000000000000ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801000000000000000000000000000000000606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be";

    function runTests() public view {
        // Positive: pairing should return true (1)
        bytes memory out1 = callOk(PRECOMPILE, INPUT_E_0_G2, OUT_LEN);
        expectEq(out1, EXPECT_TRUE, "pairing e(0,G2) != 1");

        bytes memory out2 = callOk(PRECOMPILE, INPUT_E_G1_0, OUT_LEN);
        expectEq(out2, EXPECT_TRUE, "pairing e(G1,0) != 1");

        // False (0) cases
        bytes memory out3 = callOk(PRECOMPILE, INPUT_NON_DEGENERATE, OUT_LEN);
        expectEq(out3, EXPECT_FALSE, "pairing non-degeneracy expected 0");

        bytes memory out4 = callOk(PRECOMPILE, INPUT_PRODUCT_FALSE, OUT_LEN);
        expectEq(out4, EXPECT_FALSE, "pairing product false expected 0");

        // Negative: empty input should revert (length must be multiple of 384 and non-zero)
        expectRevert(PRECOMPILE, hex"");
    }
}
