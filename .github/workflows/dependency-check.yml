name: Dependency Check

on:
  pull_request:
    paths:
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/dependency-check.yml'

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Check
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - id: all
        run: |
          echo "dependencies<<EOF" >> $GITHUB_OUTPUT
          # Extract all dependencies from go.mod (include indirect dependencies and comments).
          # `go list` isn't used because:
          # 1. it lists ALL the transitive dependencies, even those that are unused and don't make it to the go.mod file
          # 2. It doesn't extract the inline `dependency-check-ignore` comments.
          # Extract the lines from 'require (' to the first ')' including those lines in the go.mod file.
          sed -n '/require (/,/)/p' go.mod |

          # Remove the 'require (' line.
          sed '/require (/d' |

          # Remove the ')' line.
          sed '/^)/d' |

          # Remove leading whitespace from each line.
          sed 's/^[[:space:]]*//' |

          # Append the result to the file specified by the GITHUB_OUTPUT environment variable.
          tee -a $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - id: unreleased
        env:
          DEPENDENCIES: ${{ steps.all.outputs.dependencies }}
        run: |
          echo "dependencies<<EOF" >> $GITHUB_OUTPUT
          # Find all dependencies that use prerelease versions (exclude v0.0.0 versions)
          grep -Pv 'v0\.0\.0|v[0-9]+\.[0-9]+\.[0-9]+([^-]|$)' <<< "$DEPENDENCIES" | tee -a $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - id: unexplained
        env:
          DEPENDENCIES: ${{ steps.unreleased.outputs.dependencies }}
        run: |
          echo "dependencies<<EOF" >> $GITHUB_OUTPUT
          # Find all unreleased dependencies without a dependency-check-ignore comment
          grep -Pv 'dependency-check-ignore:\s' <<< "$DEPENDENCIES" | tee -a $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - if: steps.unexplained.outputs.dependencies != ''
        env:
          MESSAGE: |
            A new unreleased and unexplained dependency was discovered in this PR. Please do one of the options in [dependency management conventions](https://github.com/filecoin-project/lotus/blob/master/CONTRIBUTING.md#dependency-management).

            Unexplained unreleased dependencies:
            ${{steps.unexplained.outputs.dependencies}}
        run: |
          echo "::error::${MESSAGE//$'\n'/%0A}"
          exit 1
