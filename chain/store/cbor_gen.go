// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package store

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *SnapshotMetadata) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{163}); err != nil {
		return err
	}

	// t.F3Data (cid.Cid) (struct)
	if len("F3Data") > 8192 {
		return xerrors.Errorf("Value in field \"F3Data\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("F3Data"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("F3Data")); err != nil {
		return err
	}

	if t.F3Data == nil {
		if _, err := cw.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(cw, *t.F3Data); err != nil {
			return xerrors.Errorf("failed to write cid field t.F3Data: %w", err)
		}
	}

	// t.Version (store.SnapshotVersion) (uint64)
	if len("Version") > 8192 {
		return xerrors.Errorf("Value in field \"Version\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Version"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("Version")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Version)); err != nil {
		return err
	}

	// t.HeadTipsetKey ([]cid.Cid) (slice)
	if len("HeadTipsetKey") > 8192 {
		return xerrors.Errorf("Value in field \"HeadTipsetKey\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("HeadTipsetKey"))); err != nil {
		return err
	}
	if _, err := cw.WriteString(string("HeadTipsetKey")); err != nil {
		return err
	}

	if len(t.HeadTipsetKey) > 8192 {
		return xerrors.Errorf("Slice value in field t.HeadTipsetKey was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.HeadTipsetKey))); err != nil {
		return err
	}
	for _, v := range t.HeadTipsetKey {

		if err := cbg.WriteCid(cw, v); err != nil {
			return xerrors.Errorf("failed to write cid field v: %w", err)
		}

	}
	return nil
}

func (t *SnapshotMetadata) UnmarshalCBOR(r io.Reader) (err error) {
	*t = SnapshotMetadata{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SnapshotMetadata: map struct too large (%d)", extra)
	}

	n := extra

	nameBuf := make([]byte, 13)
	for i := uint64(0); i < n; i++ {
		nameLen, ok, err := cbg.ReadFullStringIntoBuf(cr, nameBuf, 8192)
		if err != nil {
			return err
		}

		if !ok {
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(cr, func(cid.Cid) {}); err != nil {
				return err
			}
			continue
		}

		switch string(nameBuf[:nameLen]) {
		// t.F3Data (cid.Cid) (struct)
		case "F3Data":

			{

				b, err := cr.ReadByte()
				if err != nil {
					return err
				}
				if b != cbg.CborNull[0] {
					if err := cr.UnreadByte(); err != nil {
						return err
					}

					c, err := cbg.ReadCid(cr)
					if err != nil {
						return xerrors.Errorf("failed to read cid field t.F3Data: %w", err)
					}

					t.F3Data = &c
				}

			}
			// t.Version (store.SnapshotVersion) (uint64)
		case "Version":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Version = SnapshotVersion(extra)

			}
			// t.HeadTipsetKey ([]cid.Cid) (slice)
		case "HeadTipsetKey":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > 8192 {
				return fmt.Errorf("t.HeadTipsetKey: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.HeadTipsetKey = make([]cid.Cid, extra)
			}

			for i := 0; i < int(extra); i++ {
				{
					var maj byte
					var extra uint64
					var err error
					_ = maj
					_ = extra
					_ = err

					{

						c, err := cbg.ReadCid(cr)
						if err != nil {
							return xerrors.Errorf("failed to read cid field t.HeadTipsetKey[i]: %w", err)
						}

						t.HeadTipsetKey[i] = c

					}

				}
			}

		default:
			// Field doesn't exist on this type, so ignore it
			if err := cbg.ScanForLinks(r, func(cid.Cid) {}); err != nil {
				return err
			}
		}
	}

	return nil
}
