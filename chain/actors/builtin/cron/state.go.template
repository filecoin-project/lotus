package cron

import (
    "fmt"
	"github.com/ipfs/go-cid"

	"github.com/filecoin-project/lotus/chain/actors/adt"
	"github.com/filecoin-project/lotus/chain/actors"
	actorstypes "github.com/filecoin-project/go-state-types/actors"

{{if (le .v 7)}}
	cron{{.v}} "github.com/filecoin-project/specs-actors{{.import}}actors/builtin/cron"
{{else}}
	cron{{.v}} "github.com/filecoin-project/go-state-types/builtin{{.import}}cron"
{{end}}
)

var _ State = (*state{{.v}})(nil)

func load{{.v}}(store adt.Store, root cid.Cid) (State, error) {
	out := state{{.v}}{store: store}
	err := store.Get(store.Context(), root, &out)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func make{{.v}}(store adt.Store) (State, error) {
	out := state{{.v}}{store: store}
	out.State = *cron{{.v}}.ConstructState(cron{{.v}}.BuiltInEntries())
	return &out, nil
}

type state{{.v}} struct {
	cron{{.v}}.State
	store adt.Store
}

func (s *state{{.v}}) GetState() interface{} {
	return &s.State
}

func (s *state{{.v}}) ActorKey() string {
    return actors.CronKey
}

func (s *state{{.v}}) ActorVersion() actorstypes.Version {
    return actorstypes.Version{{.v}}
}

func (s *state{{.v}}) Code() cid.Cid {
	code, ok := actors.GetActorCodeID(s.ActorVersion(), s.ActorKey())
	if !ok {
		panic(fmt.Errorf("didn't find actor %v code id for actor version %d", s.ActorKey(), s.ActorVersion()))
	}

	return code
}
