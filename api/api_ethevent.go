package api

import (
	"context"

	"github.com/filecoin-project/go-address"
	"github.com/filecoin-project/go-state-types/abi"
	"github.com/ipfs/go-cid"
)

// EthEvent defines the Ethereum compatible API for retrieving event logs
type EthEvent interface {
	// Returns event logs matching given filter spec.
	// Aliased as eth_getLogs
	EthGetLogs(ctx context.Context, filter *FilterSpec) (*FilterResult, error) //perm:read

	// Polling method for a filter, returns event logs which occurred since last poll.
	// (requires write perm since timestamp of last filter execution will be written)
	// Aliased as eth_getFilterChanges
	EthGetFilterChanges(ctx context.Context, id FilterID) (*FilterResult, error) //perm:write

	// Returns event logs matching filter with given id.
	// (requires write perm since timestamp of last filter execution will be written)
	// Aliased as eth_getFilterLogs
	EthGetFilterLogs(ctx context.Context, id FilterID) (*FilterResult, error) //perm:write

	// Installs a persistent filter based on given filter spec.
	// Aliased as eth_newFilter
	EthNewFilter(ctx context.Context, filter *FilterSpec) (FilterID, error) //perm:write

	// Installs a persistent filter to notify when a new block arrives.
	// Aliased as eth_newBlockFilter
	EthNewBlockFilter(ctx context.Context) (FilterID, error) //perm:write

	// Installs a persistent filter to notify when new messages arrive in the message pool.
	// Aliased as eth_newPendingTransactionFilter
	EthNewPendingTransactionFilter(ctx context.Context) (FilterID, error) //perm:write

	// Uninstalls a filter with given id.
	// Aliased as eth_uninstallFilter
	EthUninstallFilter(ctx context.Context, id FilterID) (bool, error) //perm:write
}

// EthEventSub defines the Ethereum compatible API for creating websocket subscriptions to event logs
type EthEventSub interface {
	// Subscribe to different event types using websockets
	// eventTypes is one or more of:
	//  - newHeads: notify when new blocks arrive.
	//  - pendingTransactions: notify when new messages arrive in the message pool.
	//  - logs: notify new event logs that match a criteria
	// params contains additional parameters used with the log event type
	// The client will receive a stream of SubscriptionResponse values until EthUnsubscribe is called.
	EthSubscribe(ctx context.Context, eventTypes []string, params SubscriptionParams) (SubscriptionResponse, error) //perm:write

	// Unsubscribe from a websocket subscription
	EthUnsubscribe(ctx context.Context, id SubscriptionID) (bool, error) //perm:write
}

// An opaque identifier generated by the Lotus node to refer to an installed filter.
type FilterID string

// Hash of a topic value (usually Keccak-256).
type TopicHash []byte

// An opaque identifier generated by the Lotus node to refer to an active subscription.
type SubscriptionID string

type FilterSpec struct {
	// Interpreted as an epoch or one of "latest" for last mined block, "earliest" for first,
	// "pending" for not yet committed messages.
	// Optional, default: "latest".
	FromBlock string

	// Interpreted as an epoch or one of "latest" for last mined block, "earliest" for first,
	// "pending" for not yet committed messages.
	// Optional, default: "latest".
	ToBlock string

	// Actor address or a list of addresses from which event logs should originate.
	// Optional, default nil.
	// The JSON decoding must treat a string as equivalent to an array with one value, for example
	// "0x8888f1f195afa192cfee86069858" must be decoded as [ "0x8888f1f195afa192cfee86069858" ]
	Address []address.Address

	// List of topics to be matched.
	// Optional, default: empty list
	Topics TopicSpec

	// Restricts event logs returned to those in receipts contained in the tipset this block is part of.
	// If BlockHash is present in in the filter criteria, then neither FromBlock nor ToBlock are allowed.
	// Added in EIP-234
	BlockHash cid.Cid
}

// TopicSpec represents a specification for matching by topic. An empty spec means all topics
// will be matched. Otherwise topics are matched conjunctively in the first dimension of the
// slice and disjunctively in the second dimension. Topics are matched in order.
// An event log with topics [A, B] will be matched by the following topic specs:
// [] "all"
// [[A]] "A in first position (and anything after)"
// [[A]] "A in first position (and anything after)"
// [nil, [B] ] "anything in first position AND B in second position (and anything after)"
// [[A], [B]] "A in first position AND B in second position (and anything after)"
// [[A, B], [A, B]] "(A OR B) in first position AND (A OR B) in second position (and anything after)"
//
// The JSON decoding must treat string values as equivalent to arrays with one value, for example
// { "A", [ "B", "C" ] } must be decoded as [ [ A ], [ B, C ] ]
type TopicSpec struct {
	Topics [][]TopicHash
}

// FilterResult represents the response from executing a filter
type FilterResult struct {
	// List of block hashes. Only populated when the filter has been installed via EthNewBlockFilter
	NewBlockHashes []cid.Cid

	// List of message hashes. Only populated when the filter has been installed via EthNewPendingTransactionFilter
	NewMessageHashes []cid.Cid

	// List of event logs. Only populated when the filter has been installed via EthNewFilter
	NewLogs []EventLog
}

type EventLog struct {
	// Indicates whether the event log was removed due to a chain reorganization.
	Removed bool

	// LogIndex is the index of the event log in the sequence of events produced by the message execution.
	// (this is the index in the events AMT on the message receipt)
	LogIndex uint64

	// TransactionIndex is the index in the tipset of the message that produced the event log.
	// The index corresponds to the sequence of messages produced by ChainGetParentMessages
	TransactionIndex uint64

	// TransactionHash is the cid of the message that produced the event log.
	TransactionHash cid.Cid

	// BlockHash is the hash of a block in the tipset containing the message receipt of the message execution.
	// This may be passed to ChainGetParentReceipts to obtain a list of receipts. The receipt
	// containing the events will be at TransactionIndex in the receipt list.
	BlockHash cid.Cid

	// BlockNumber is the epoch at which the message was executed. This is the epoch containing
	// the message receipt.
	BlockNumber abi.ChainEpoch

	// Address is the address of the actor that produced the event log.
	Address address.Address

	// Data is the values of the event log, excluding
	Data [][]byte

	// List of topics associated with the event log.
	Topics []TopicHash
}

type SubscriptionParams struct {
	// Actor address or a list of addresses from which event logs should originate.
	// Optional, default nil.
	Address address.Address

	// List of topics to be matched.
	// Optional, default: empty list
	Topics TopicSpec
}

type SubscriptionResponse struct {
	// The persistent identifier for the subscription which can be used to unsubscribe.
	SubscriptionID SubscriptionID

	// The object matching the subscription. This may be a BlockHeader, a Message or an EventLog
	Result any
}
