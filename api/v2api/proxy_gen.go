// Code generated by github.com/filecoin-project/lotus/gen/api. DO NOT EDIT.

package v2api

import (
	"context"

	"golang.org/x/xerrors"

	"github.com/filecoin-project/go-jsonrpc"
	"github.com/filecoin-project/go-state-types/abi"

	"github.com/filecoin-project/lotus/api"
	"github.com/filecoin-project/lotus/chain/types"
)

var ErrNotSupported = xerrors.New("method not supported")

type FullNodeStruct struct {
	Internal FullNodeMethods
}

type FullNodeMethods struct {
	ChainGetMessagesInTipset func(p0 context.Context, p1 types.TipSetSelector) ([]api.Message, error) `perm:"read"`

	ChainGetTipSetAfterHeight func(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetSelector) (*types.TipSet, error) ``

	ChainGetTipSetByHeight func(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetSelector) (*types.TipSet, error) `perm:"read"`

	ChainHead func(p0 context.Context, p1 jsonrpc.RawParams) (*types.TipSet, error) `perm:"read"`

	ChainNotify func(p0 context.Context, p1 jsonrpc.RawParams) (<-chan []*api.HeadChange, error) `perm:"read"`
}

type FullNodeStub struct {
}

func (s *FullNodeStruct) ChainGetMessagesInTipset(p0 context.Context, p1 types.TipSetSelector) ([]api.Message, error) {
	if s.Internal.ChainGetMessagesInTipset == nil {
		return *new([]api.Message), ErrNotSupported
	}
	return s.Internal.ChainGetMessagesInTipset(p0, p1)
}

func (s *FullNodeStub) ChainGetMessagesInTipset(p0 context.Context, p1 types.TipSetSelector) ([]api.Message, error) {
	return *new([]api.Message), ErrNotSupported
}

func (s *FullNodeStruct) ChainGetTipSetAfterHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetSelector) (*types.TipSet, error) {
	if s.Internal.ChainGetTipSetAfterHeight == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainGetTipSetAfterHeight(p0, p1, p2)
}

func (s *FullNodeStub) ChainGetTipSetAfterHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetSelector) (*types.TipSet, error) {
	return nil, ErrNotSupported
}

func (s *FullNodeStruct) ChainGetTipSetByHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetSelector) (*types.TipSet, error) {
	if s.Internal.ChainGetTipSetByHeight == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainGetTipSetByHeight(p0, p1, p2)
}

func (s *FullNodeStub) ChainGetTipSetByHeight(p0 context.Context, p1 abi.ChainEpoch, p2 types.TipSetSelector) (*types.TipSet, error) {
	return nil, ErrNotSupported
}

func (s *FullNodeStruct) ChainHead(p0 context.Context, p1 jsonrpc.RawParams) (*types.TipSet, error) {
	if s.Internal.ChainHead == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainHead(p0, p1)
}

func (s *FullNodeStub) ChainHead(p0 context.Context, p1 jsonrpc.RawParams) (*types.TipSet, error) {
	return nil, ErrNotSupported
}

func (s *FullNodeStruct) ChainNotify(p0 context.Context, p1 jsonrpc.RawParams) (<-chan []*api.HeadChange, error) {
	if s.Internal.ChainNotify == nil {
		return nil, ErrNotSupported
	}
	return s.Internal.ChainNotify(p0, p1)
}

func (s *FullNodeStub) ChainNotify(p0 context.Context, p1 jsonrpc.RawParams) (<-chan []*api.HeadChange, error) {
	return nil, ErrNotSupported
}

var _ FullNode = new(FullNodeStruct)
