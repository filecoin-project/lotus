// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/filecoin-project/lotus/api/v2api (interfaces: FullNode)

// Package v2mocks is a generated GoMock package.
package v2mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	jsonrpc "github.com/filecoin-project/go-jsonrpc"
	abi "github.com/filecoin-project/go-state-types/abi"

	api "github.com/filecoin-project/lotus/api"
	types "github.com/filecoin-project/lotus/chain/types"
)

// MockFullNode is a mock of FullNode interface.
type MockFullNode struct {
	ctrl     *gomock.Controller
	recorder *MockFullNodeMockRecorder
}

// MockFullNodeMockRecorder is the mock recorder for MockFullNode.
type MockFullNodeMockRecorder struct {
	mock *MockFullNode
}

// NewMockFullNode creates a new mock instance.
func NewMockFullNode(ctrl *gomock.Controller) *MockFullNode {
	mock := &MockFullNode{ctrl: ctrl}
	mock.recorder = &MockFullNodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFullNode) EXPECT() *MockFullNodeMockRecorder {
	return m.recorder
}

// ChainGetMessagesInTipset mocks base method.
func (m *MockFullNode) ChainGetMessagesInTipset(arg0 context.Context, arg1 types.TipSetSelector) ([]api.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainGetMessagesInTipset", arg0, arg1)
	ret0, _ := ret[0].([]api.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainGetMessagesInTipset indicates an expected call of ChainGetMessagesInTipset.
func (mr *MockFullNodeMockRecorder) ChainGetMessagesInTipset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainGetMessagesInTipset", reflect.TypeOf((*MockFullNode)(nil).ChainGetMessagesInTipset), arg0, arg1)
}

// ChainGetTipSetAfterHeight mocks base method.
func (m *MockFullNode) ChainGetTipSetAfterHeight(arg0 context.Context, arg1 abi.ChainEpoch, arg2 types.TipSetSelector) (*types.TipSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainGetTipSetAfterHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.TipSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainGetTipSetAfterHeight indicates an expected call of ChainGetTipSetAfterHeight.
func (mr *MockFullNodeMockRecorder) ChainGetTipSetAfterHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainGetTipSetAfterHeight", reflect.TypeOf((*MockFullNode)(nil).ChainGetTipSetAfterHeight), arg0, arg1, arg2)
}

// ChainGetTipSetByHeight mocks base method.
func (m *MockFullNode) ChainGetTipSetByHeight(arg0 context.Context, arg1 abi.ChainEpoch, arg2 types.TipSetSelector) (*types.TipSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainGetTipSetByHeight", arg0, arg1, arg2)
	ret0, _ := ret[0].(*types.TipSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainGetTipSetByHeight indicates an expected call of ChainGetTipSetByHeight.
func (mr *MockFullNodeMockRecorder) ChainGetTipSetByHeight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainGetTipSetByHeight", reflect.TypeOf((*MockFullNode)(nil).ChainGetTipSetByHeight), arg0, arg1, arg2)
}

// ChainHead mocks base method.
func (m *MockFullNode) ChainHead(arg0 context.Context, arg1 jsonrpc.RawParams) (*types.TipSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainHead", arg0, arg1)
	ret0, _ := ret[0].(*types.TipSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainHead indicates an expected call of ChainHead.
func (mr *MockFullNodeMockRecorder) ChainHead(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainHead", reflect.TypeOf((*MockFullNode)(nil).ChainHead), arg0, arg1)
}

// ChainNotify mocks base method.
func (m *MockFullNode) ChainNotify(arg0 context.Context, arg1 jsonrpc.RawParams) (<-chan []*api.HeadChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainNotify", arg0, arg1)
	ret0, _ := ret[0].(<-chan []*api.HeadChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainNotify indicates an expected call of ChainNotify.
func (mr *MockFullNodeMockRecorder) ChainNotify(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainNotify", reflect.TypeOf((*MockFullNode)(nil).ChainNotify), arg0, arg1)
}
