// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	filestore "github.com/filecoin-project/go-fil-markets/filestore"
)

// FileStore is an autogenerated mock type for the FileStore type
type FileStore struct {
	mock.Mock
}

// Create provides a mock function with given fields: p
func (_m *FileStore) Create(p filestore.Path) (filestore.File, error) {
	ret := _m.Called(p)

	var r0 filestore.File
	if rf, ok := ret.Get(0).(func(filestore.Path) filestore.File); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filestore.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(filestore.Path) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTemp provides a mock function with given fields:
func (_m *FileStore) CreateTemp() (filestore.File, error) {
	ret := _m.Called()

	var r0 filestore.File
	if rf, ok := ret.Get(0).(func() filestore.File); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filestore.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: p
func (_m *FileStore) Delete(p filestore.Path) error {
	ret := _m.Called(p)

	var r0 error
	if rf, ok := ret.Get(0).(func(filestore.Path) error); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Open provides a mock function with given fields: p
func (_m *FileStore) Open(p filestore.Path) (filestore.File, error) {
	ret := _m.Called(p)

	var r0 filestore.File
	if rf, ok := ret.Get(0).(func(filestore.Path) filestore.File); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filestore.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(filestore.Path) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: p, f
func (_m *FileStore) Store(p filestore.Path, f filestore.File) (filestore.Path, error) {
	ret := _m.Called(p, f)

	var r0 filestore.Path
	if rf, ok := ret.Get(0).(func(filestore.Path, filestore.File) filestore.Path); ok {
		r0 = rf(p, f)
	} else {
		r0 = ret.Get(0).(filestore.Path)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(filestore.Path, filestore.File) error); ok {
		r1 = rf(p, f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
