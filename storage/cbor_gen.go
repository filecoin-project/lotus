package storage

import (
	"fmt"
	"io"

	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

var _ = xerrors.Errorf

func (t *SealTicket) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{162}); err != nil {
		return err
	}

	// t.BlockHeight (uint64) (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("BlockHeight")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("BlockHeight")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, uint64(t.BlockHeight))); err != nil {
		return err
	}

	// t.TicketBytes ([]uint8) (slice)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("TicketBytes")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("TicketBytes")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.TicketBytes)))); err != nil {
		return err
	}
	if _, err := w.Write(t.TicketBytes); err != nil {
		return err
	}
	return nil
}

func (t *SealTicket) UnmarshalCBOR(r io.Reader) error {
	br := cbg.GetPeeker(r)

	maj, extra, err := cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	var name string

	// t.BlockHeight (uint64) (uint64)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "BlockHeight" {
		return fmt.Errorf("expected struct map entry %s to be BlockHeight", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.BlockHeight = uint64(extra)
	// t.TicketBytes ([]uint8) (slice)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "TicketBytes" {
		return fmt.Errorf("expected struct map entry %s to be TicketBytes", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.TicketBytes: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.TicketBytes = make([]byte, extra)
	if _, err := io.ReadFull(br, t.TicketBytes); err != nil {
		return err
	}
	return nil
}

func (t *SealSeed) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{162}); err != nil {
		return err
	}

	// t.BlockHeight (uint64) (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("BlockHeight")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("BlockHeight")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, uint64(t.BlockHeight))); err != nil {
		return err
	}

	// t.TicketBytes ([]uint8) (slice)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("TicketBytes")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("TicketBytes")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.TicketBytes)))); err != nil {
		return err
	}
	if _, err := w.Write(t.TicketBytes); err != nil {
		return err
	}
	return nil
}

func (t *SealSeed) UnmarshalCBOR(r io.Reader) error {
	br := cbg.GetPeeker(r)

	maj, extra, err := cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra != 2 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	var name string

	// t.BlockHeight (uint64) (uint64)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "BlockHeight" {
		return fmt.Errorf("expected struct map entry %s to be BlockHeight", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.BlockHeight = uint64(extra)
	// t.TicketBytes ([]uint8) (slice)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "TicketBytes" {
		return fmt.Errorf("expected struct map entry %s to be TicketBytes", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.TicketBytes: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.TicketBytes = make([]byte, extra)
	if _, err := io.ReadFull(br, t.TicketBytes); err != nil {
		return err
	}
	return nil
}

func (t *Piece) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{163}); err != nil {
		return err
	}

	// t.DealID (uint64) (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("DealID")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("DealID")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, uint64(t.DealID))); err != nil {
		return err
	}

	// t.Size (uint64) (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("Size")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("Size")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, uint64(t.Size))); err != nil {
		return err
	}

	// t.CommP ([]uint8) (slice)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("CommP")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("CommP")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.CommP)))); err != nil {
		return err
	}
	if _, err := w.Write(t.CommP); err != nil {
		return err
	}
	return nil
}

func (t *Piece) UnmarshalCBOR(r io.Reader) error {
	br := cbg.GetPeeker(r)

	maj, extra, err := cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	var name string

	// t.DealID (uint64) (uint64)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "DealID" {
		return fmt.Errorf("expected struct map entry %s to be DealID", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.DealID = uint64(extra)
	// t.Size (uint64) (uint64)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "Size" {
		return fmt.Errorf("expected struct map entry %s to be Size", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.Size = uint64(extra)
	// t.CommP ([]uint8) (slice)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "CommP" {
		return fmt.Errorf("expected struct map entry %s to be CommP", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.CommP: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.CommP = make([]byte, extra)
	if _, err := io.ReadFull(br, t.CommP); err != nil {
		return err
	}
	return nil
}

func (t *SectorInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{173}); err != nil {
		return err
	}

	// t.State (uint64) (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("State")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("State")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, uint64(t.State))); err != nil {
		return err
	}

	// t.SectorID (uint64) (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("SectorID")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("SectorID")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, uint64(t.SectorID))); err != nil {
		return err
	}

	// t.Nonce (uint64) (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("Nonce")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("Nonce")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, uint64(t.Nonce))); err != nil {
		return err
	}

	// t.Pieces ([]storage.Piece) (slice)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("Pieces")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("Pieces")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajArray, uint64(len(t.Pieces)))); err != nil {
		return err
	}
	for _, v := range t.Pieces {
		if err := v.MarshalCBOR(w); err != nil {
			return err
		}
	}

	// t.CommD ([]uint8) (slice)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("CommD")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("CommD")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.CommD)))); err != nil {
		return err
	}
	if _, err := w.Write(t.CommD); err != nil {
		return err
	}

	// t.CommR ([]uint8) (slice)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("CommR")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("CommR")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.CommR)))); err != nil {
		return err
	}
	if _, err := w.Write(t.CommR); err != nil {
		return err
	}

	// t.Proof ([]uint8) (slice)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("Proof")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("Proof")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.Proof)))); err != nil {
		return err
	}
	if _, err := w.Write(t.Proof); err != nil {
		return err
	}

	// t.Ticket (storage.SealTicket) (struct)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("Ticket")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("Ticket")); err != nil {
		return err
	}

	if err := t.Ticket.MarshalCBOR(w); err != nil {
		return err
	}

	// t.PreCommitMessage (cid.Cid) (struct)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("PreCommitMessage")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("PreCommitMessage")); err != nil {
		return err
	}

	if t.PreCommitMessage == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(w, *t.PreCommitMessage); err != nil {
			return xerrors.Errorf("failed to write cid field t.PreCommitMessage: %w", err)
		}
	}

	// t.Seed (storage.SealSeed) (struct)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("Seed")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("Seed")); err != nil {
		return err
	}

	if err := t.Seed.MarshalCBOR(w); err != nil {
		return err
	}

	// t.CommitMessage (cid.Cid) (struct)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("CommitMessage")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("CommitMessage")); err != nil {
		return err
	}

	if t.CommitMessage == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(w, *t.CommitMessage); err != nil {
			return xerrors.Errorf("failed to write cid field t.CommitMessage: %w", err)
		}
	}

	// t.FaultReportMsg (cid.Cid) (struct)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("FaultReportMsg")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("FaultReportMsg")); err != nil {
		return err
	}

	if t.FaultReportMsg == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteCid(w, *t.FaultReportMsg); err != nil {
			return xerrors.Errorf("failed to write cid field t.FaultReportMsg: %w", err)
		}
	}

	// t.LastErr (string) (string)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("LastErr")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("LastErr")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len(t.LastErr)))); err != nil {
		return err
	}
	if _, err := w.Write([]byte(t.LastErr)); err != nil {
		return err
	}

	// t.RemoteID (string) (string)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len("RemoteID")))); err != nil {
		return err
	}
	if _, err := w.Write([]byte("RemoteID")); err != nil {
		return err
	}

	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len(t.RemoteID)))); err != nil {
		return err
	}
	if _, err := w.Write([]byte(t.RemoteID)); err != nil {
		return err
	}

	return nil
}

func (t *SectorInfo) UnmarshalCBOR(r io.Reader) error {
	br := cbg.GetPeeker(r)

	maj, extra, err := cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra != 13 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	var name string

	// t.State (uint64) (uint64)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "State" {
		return fmt.Errorf("expected struct map entry %s to be State", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.State = uint64(extra)
	// t.SectorID (uint64) (uint64)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "SectorID" {
		return fmt.Errorf("expected struct map entry %s to be SectorID", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.SectorID = uint64(extra)
	// t.Nonce (uint64) (uint64)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "Nonce" {
		return fmt.Errorf("expected struct map entry %s to be Nonce", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.Nonce = uint64(extra)
	// t.Pieces ([]storage.Piece) (slice)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "Pieces" {
		return fmt.Errorf("expected struct map entry %s to be Pieces", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("t.Pieces: array too large (%d)", extra)
	}

	if maj != cbg.MajArray {
		return fmt.Errorf("expected cbor array")
	}
	if extra > 0 {
		t.Pieces = make([]Piece, extra)
	}
	for i := 0; i < int(extra); i++ {

		var v Piece
		if err := v.UnmarshalCBOR(br); err != nil {
			return err
		}

		t.Pieces[i] = v
	}

	// t.CommD ([]uint8) (slice)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "CommD" {
		return fmt.Errorf("expected struct map entry %s to be CommD", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.CommD: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.CommD = make([]byte, extra)
	if _, err := io.ReadFull(br, t.CommD); err != nil {
		return err
	}
	// t.CommR ([]uint8) (slice)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "CommR" {
		return fmt.Errorf("expected struct map entry %s to be CommR", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.CommR: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.CommR = make([]byte, extra)
	if _, err := io.ReadFull(br, t.CommR); err != nil {
		return err
	}
	// t.Proof ([]uint8) (slice)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "Proof" {
		return fmt.Errorf("expected struct map entry %s to be Proof", name)
	}

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}

	if extra > cbg.ByteArrayMaxLen {
		return fmt.Errorf("t.Proof: byte array too large (%d)", extra)
	}
	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.Proof = make([]byte, extra)
	if _, err := io.ReadFull(br, t.Proof); err != nil {
		return err
	}
	// t.Ticket (storage.SealTicket) (struct)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "Ticket" {
		return fmt.Errorf("expected struct map entry %s to be Ticket", name)
	}

	{

		if err := t.Ticket.UnmarshalCBOR(br); err != nil {
			return err
		}

	}
	// t.PreCommitMessage (cid.Cid) (struct)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "PreCommitMessage" {
		return fmt.Errorf("expected struct map entry %s to be PreCommitMessage", name)
	}

	{

		pb, err := br.PeekByte()
		if err != nil {
			return err
		}
		if pb == cbg.CborNull[0] {
			var nbuf [1]byte
			if _, err := br.Read(nbuf[:]); err != nil {
				return err
			}
		} else {

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.PreCommitMessage: %w", err)
			}

			t.PreCommitMessage = &c
		}

	}
	// t.Seed (storage.SealSeed) (struct)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "Seed" {
		return fmt.Errorf("expected struct map entry %s to be Seed", name)
	}

	{

		if err := t.Seed.UnmarshalCBOR(br); err != nil {
			return err
		}

	}
	// t.CommitMessage (cid.Cid) (struct)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "CommitMessage" {
		return fmt.Errorf("expected struct map entry %s to be CommitMessage", name)
	}

	{

		pb, err := br.PeekByte()
		if err != nil {
			return err
		}
		if pb == cbg.CborNull[0] {
			var nbuf [1]byte
			if _, err := br.Read(nbuf[:]); err != nil {
				return err
			}
		} else {

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.CommitMessage: %w", err)
			}

			t.CommitMessage = &c
		}

	}
	// t.FaultReportMsg (cid.Cid) (struct)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "FaultReportMsg" {
		return fmt.Errorf("expected struct map entry %s to be FaultReportMsg", name)
	}

	{

		pb, err := br.PeekByte()
		if err != nil {
			return err
		}
		if pb == cbg.CborNull[0] {
			var nbuf [1]byte
			if _, err := br.Read(nbuf[:]); err != nil {
				return err
			}
		} else {

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.FaultReportMsg: %w", err)
			}

			t.FaultReportMsg = &c
		}

	}
	// t.LastErr (string) (string)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "LastErr" {
		return fmt.Errorf("expected struct map entry %s to be LastErr", name)
	}

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		t.LastErr = string(sval)
	}

	// t.RemoteID (string) (string)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		name = string(sval)
	}

	if name != "RemoteID" {
		//return fmt.Errorf("expected struct map entry %s to be RemoteID", name)
		t.RemoteID = string("")
		return nil
	}

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		t.RemoteID = string(sval)
	}
	return nil
}
