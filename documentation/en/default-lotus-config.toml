[API]
  # Binding address for the Lotus API
  #
  # type: string
  # env var: LOTUS_API_LISTENADDRESS
  #ListenAddress = "/ip4/127.0.0.1/tcp/1234/http"

  # type: string
  # env var: LOTUS_API_REMOTELISTENADDRESS
  #RemoteListenAddress = ""

  # type: Duration
  # env var: LOTUS_API_TIMEOUT
  #Timeout = "30s"


[Backup]
  # When set to true disables metadata log (.lotus/kvlog). This can save disk
  # space by reducing metadata redundancy.
  # 
  # Note that in case of metadata corruption it might be much harder to recover
  # your node if metadata log is disabled
  #
  # type: bool
  # env var: LOTUS_BACKUP_DISABLEMETADATALOG
  #DisableMetadataLog = true


[Logging]
  [Logging.SubsystemLevels]
    # env var: LOTUS_LOGGING_SUBSYSTEMLEVELS_EXAMPLE-SUBSYSTEM
    #example-subsystem = "INFO"


[Libp2p]
  # Binding address for the libp2p host - 0 means random port.
  # Format: multiaddress; see https://multiformats.io/multiaddr/
  #
  # type: []string
  # env var: LOTUS_LIBP2P_LISTENADDRESSES
  #ListenAddresses = ["/ip4/0.0.0.0/tcp/0", "/ip6/::/tcp/0", "/ip4/0.0.0.0/udp/0/quic-v1", "/ip6/::/udp/0/quic-v1", "/ip4/0.0.0.0/udp/0/quic-v1/webtransport", "/ip6/::/udp/0/quic-v1/webtransport"]

  # Addresses to explicitally announce to other peers. If not specified,
  # all interface addresses are announced
  # Format: multiaddress
  #
  # type: []string
  # env var: LOTUS_LIBP2P_ANNOUNCEADDRESSES
  #AnnounceAddresses = []

  # Addresses to not announce
  # Format: multiaddress
  #
  # type: []string
  # env var: LOTUS_LIBP2P_NOANNOUNCEADDRESSES
  #NoAnnounceAddresses = []

  # When not disabled (default), lotus asks NAT devices (e.g., routers), to
  # open up an external port and forward it to the port lotus is running on.
  # When this works (i.e., when your router supports NAT port forwarding),
  # it makes the local lotus node accessible from the public internet
  #
  # type: bool
  # env var: LOTUS_LIBP2P_DISABLENATPORTMAP
  #DisableNatPortMap = false

  # ConnMgrLow is the number of connections that the basic connection manager
  # will trim down to.
  #
  # type: uint
  # env var: LOTUS_LIBP2P_CONNMGRLOW
  #ConnMgrLow = 150

  # ConnMgrHigh is the number of connections that, when exceeded, will trigger
  # a connection GC operation. Note: protected/recently formed connections don't
  # count towards this limit.
  #
  # type: uint
  # env var: LOTUS_LIBP2P_CONNMGRHIGH
  #ConnMgrHigh = 180

  # ConnMgrGrace is a time duration that new connections are immune from being
  # closed by the connection manager.
  #
  # type: Duration
  # env var: LOTUS_LIBP2P_CONNMGRGRACE
  #ConnMgrGrace = "20s"


[Pubsub]
  # Run the node in bootstrap-node mode
  #
  # type: bool
  # env var: LOTUS_PUBSUB_BOOTSTRAPPER
  #Bootstrapper = false

  # type: string
  # env var: LOTUS_PUBSUB_REMOTETRACER
  #RemoteTracer = ""

  # Path to file that will be used to output tracer content in JSON format.
  # If present tracer will save data to defined file.
  # Format: file path
  #
  # type: string
  # env var: LOTUS_PUBSUB_JSONTRACER
  #JsonTracer = ""

  # Connection string for elasticsearch instance.
  # If present tracer will save data to elasticsearch.
  # Format: https://<username>:<password>@<elasticsearch_url>:<port>/
  #
  # type: string
  # env var: LOTUS_PUBSUB_ELASTICSEARCHTRACER
  #ElasticSearchTracer = ""

  # Name of elasticsearch index that will be used to save tracer data.
  # This property is used only if ElasticSearchTracer propery is set.
  #
  # type: string
  # env var: LOTUS_PUBSUB_ELASTICSEARCHINDEX
  #ElasticSearchIndex = ""

  # Auth token that will be passed with logs to elasticsearch - used for weighted peers score.
  #
  # type: string
  # env var: LOTUS_PUBSUB_TRACERSOURCEAUTH
  #TracerSourceAuth = ""


[Wallet]
  # type: string
  # env var: LOTUS_WALLET_REMOTEBACKEND
  #RemoteBackend = ""

  # type: bool
  # env var: LOTUS_WALLET_ENABLELEDGER
  #EnableLedger = false

  # type: bool
  # env var: LOTUS_WALLET_DISABLELOCAL
  #DisableLocal = false


[Fees]
  # type: types.FIL
  # env var: LOTUS_FEES_DEFAULTMAXFEE
  #DefaultMaxFee = "0.07 FIL"


[Chainstore]
  # type: bool
  # env var: LOTUS_CHAINSTORE_ENABLESPLITSTORE
  EnableSplitstore = true

  [Chainstore.Splitstore]
    # ColdStoreType specifies the type of the coldstore.
    # It can be "discard" (default) for discarding cold blocks, "messages" to store only messages or "universal" to store all chain state..
    #
    # type: string
    # env var: LOTUS_CHAINSTORE_SPLITSTORE_COLDSTORETYPE
    #ColdStoreType = "discard"

    # HotStoreType specifies the type of the hotstore.
    # Only currently supported value is "badger".
    #
    # type: string
    # env var: LOTUS_CHAINSTORE_SPLITSTORE_HOTSTORETYPE
    #HotStoreType = "badger"

    # MarkSetType specifies the type of the markset.
    # It can be "map" for in memory marking or "badger" (default) for on-disk marking.
    #
    # type: string
    # env var: LOTUS_CHAINSTORE_SPLITSTORE_MARKSETTYPE
    #MarkSetType = "badger"

    # HotStoreMessageRetention specifies the retention policy for messages, in finalities beyond
    # the compaction boundary; default is 0.
    #
    # type: uint64
    # env var: LOTUS_CHAINSTORE_SPLITSTORE_HOTSTOREMESSAGERETENTION
    #HotStoreMessageRetention = 0

    # HotStoreFullGCFrequency specifies how often to perform a full (moving) GC on the hotstore.
    # A value of 0 disables, while a value 1 will do full GC in every compaction.
    # Default is 20 (about once a week).
    #
    # type: uint64
    # env var: LOTUS_CHAINSTORE_SPLITSTORE_HOTSTOREFULLGCFREQUENCY
    #HotStoreFullGCFrequency = 20

    # HotStoreMaxSpaceTarget sets a target max disk size for the hotstore. Splitstore GC
    # will run moving GC if disk utilization gets within a threshold (150 GB) of the target.
    # Splitstore GC will NOT run moving GC if the total size of the move would get
    # within 50 GB of the target, and instead will run a more aggressive online GC.
    # If both HotStoreFullGCFrequency and HotStoreMaxSpaceTarget are set then splitstore
    # GC will trigger moving GC if either configuration condition is met.
    # A reasonable minimum is 2x fully GCed hotstore size + 50 G buffer.
    # At this minimum size moving GC happens every time, any smaller and moving GC won't
    # be able to run. In spring 2023 this minimum is ~550 GB.
    #
    # type: uint64
    # env var: LOTUS_CHAINSTORE_SPLITSTORE_HOTSTOREMAXSPACETARGET
    #HotStoreMaxSpaceTarget = 650000000000

    # When HotStoreMaxSpaceTarget is set Moving GC will be triggered when total moving size
    # exceeds HotstoreMaxSpaceTarget - HotstoreMaxSpaceThreshold
    #
    # type: uint64
    # env var: LOTUS_CHAINSTORE_SPLITSTORE_HOTSTOREMAXSPACETHRESHOLD
    #HotStoreMaxSpaceThreshold = 150000000000

    # Safety buffer to prevent moving GC from overflowing disk when HotStoreMaxSpaceTarget
    # is set.  Moving GC will not occur when total moving size exceeds
    # HotstoreMaxSpaceTarget - HotstoreMaxSpaceSafetyBuffer
    #
    # type: uint64
    # env var: LOTUS_CHAINSTORE_SPLITSTORE_HOTSTOREMAXSPACESAFETYBUFFER
    #HotstoreMaxSpaceSafetyBuffer = 50000000000


[Fevm]
  # EnableEthRPC enables eth_ rpc, and enables storing a mapping of eth transaction hashes to filecoin message Cids.
  # This will also enable the RealTimeFilterAPI and HistoricFilterAPI by default, but they can be disabled by config options above.
  #
  # type: bool
  # env var: LOTUS_FEVM_ENABLEETHRPC
  #EnableEthRPC = false

  # EthTraceFilterMaxResults sets the maximum results returned per request by trace_filter
  #
  # type: uint64
  # env var: LOTUS_FEVM_ETHTRACEFILTERMAXRESULTS
  #EthTraceFilterMaxResults = 500

  # EthBlkCacheSize specifies the size of the cache used for caching Ethereum blocks.
  # This cache enhances the performance of the eth_getBlockByHash RPC call by minimizing the need to access chain state for
  # recently requested blocks that are already cached.
  # The default size of the cache is 500 blocks.
  # Note: Setting this value to 0 disables the cache.
  #
  # type: int
  # env var: LOTUS_FEVM_ETHBLKCACHESIZE
  #EthBlkCacheSize = 500


[Events]
  # DisableRealTimeFilterAPI will disable the RealTimeFilterAPI that can create and query filters for actor events as they are emitted.
  # The API is enabled when Fevm.EnableEthRPC or EnableActorEventsAPI is true, but can be disabled selectively with this flag.
  #
  # type: bool
  # env var: LOTUS_EVENTS_DISABLEREALTIMEFILTERAPI
  #DisableRealTimeFilterAPI = false

  # EnableActorEventsAPI enables the Actor events API that enables clients to consume events
  # emitted by (smart contracts + built-in Actors).
  # This will also enable the RealTimeFilterAPI and HistoricFilterAPI by default, but they can be
  # disabled by setting their respective Disable* options.
  #
  # type: bool
  # env var: LOTUS_EVENTS_ENABLEACTOREVENTSAPI
  #EnableActorEventsAPI = false

  # FilterTTL specifies the time to live for actor event filters. Filters that haven't been accessed longer than
  # this time become eligible for automatic deletion. Filters consume resources, so if they are unused they
  # should not be retained.
  #
  # type: Duration
  # env var: LOTUS_EVENTS_FILTERTTL
  #FilterTTL = "1h0m0s"

  # MaxFilters specifies the maximum number of filters that may exist at any one time.
  # Multi-tenant environments may want to increase this value to serve a larger number of clients. If using
  # lotus-gateway, this global limit can be coupled with --eth-max-filters-per-conn which limits the number
  # of filters per connection.
  #
  # type: int
  # env var: LOTUS_EVENTS_MAXFILTERS
  #MaxFilters = 100

  # MaxFilterResults specifies the maximum number of results that can be accumulated by an actor event filter.
  #
  # type: int
  # env var: LOTUS_EVENTS_MAXFILTERRESULTS
  #MaxFilterResults = 10000

  # MaxFilterHeightRange specifies the maximum range of heights that can be used in a filter (to avoid querying
  # the entire chain)
  #
  # type: uint64
  # env var: LOTUS_EVENTS_MAXFILTERHEIGHTRANGE
  #MaxFilterHeightRange = 2880


[ChainIndexer]
  # EnableIndexer controls whether the chain indexer is active.
  # The chain indexer is responsible for indexing tipsets, messages, and events from the chain state.
  # It is a crucial component for optimizing Lotus RPC response times.
  # 
  # Default: false (indexer is disabled)
  # 
  # Setting this to true will enable the indexer, which will significantly improve RPC performance.
  # It is strongly recommended to keep this set to true if you are an RPC provider.
  #
  # type: bool
  # env var: LOTUS_CHAININDEXER_ENABLEINDEXER
  #EnableIndexer = false

  # GCRetentionEpochs specifies the number of epochs for which data is retained in the Indexer.
  # The garbage collection (GC) process removes data older than this retention period.
  # Setting this to 0 disables GC, preserving all historical data indefinitely.
  # 
  # Default: 0 (GC disabled)
  #
  # type: int64
  # env var: LOTUS_CHAININDEXER_GCRETENTIONEPOCHS
  #GCRetentionEpochs = 0

  # ReconcileEmptyIndex determines whether to reconcile the index with the chain state
  # during startup when the index is empty.
  # 
  # When set to true:
  # - On startup, if the index is empty, the indexer will index the available
  # chain state on the node albeit within the MaxReconcileTipsets limit.
  # 
  # When set to false:
  # - The indexer will not automatically re-index the chain state on startup if the index is empty.
  # 
  # Default: false
  # 
  # Note: The number of tipsets reconciled (i.e. indexed) during this process can be
  # controlled using the MaxReconcileTipsets option.
  #
  # type: bool
  # env var: LOTUS_CHAININDEXER_RECONCILEEMPTYINDEX
  #ReconcileEmptyIndex = false

  # MaxReconcileTipsets limits the number of tipsets to reconcile with the chain during startup.
  # It represents the maximum number of tipsets to index from the chain state that are absent in the index.
  # 
  # Default: 3 * epochsPerDay (approximately 3 days of chain history)
  # 
  # Note: Setting this value too low may result in incomplete indexing, while setting it too high
  # may increase startup time.
  #
  # type: uint64
  # env var: LOTUS_CHAININDEXER_MAXRECONCILETIPSETS
  #MaxReconcileTipsets = 8640


[FaultReporter]
  # EnableConsensusFaultReporter controls whether the node will monitor and
  # report consensus faults. When enabled, the node will watch for malicious
  # behaviors like double-mining and parent grinding, and submit reports to the
  # network. This can earn reporter rewards, but is not guaranteed. Nodes should
  # enable fault reporting with care, as it may increase resource usage, and may
  # generate gas fees without earning rewards.
  #
  # type: bool
  # env var: LOTUS_FAULTREPORTER_ENABLECONSENSUSFAULTREPORTER
  #EnableConsensusFaultReporter = false

  # ConsensusFaultReporterDataDir is the path where fault reporter state will be
  # persisted. This directory should have adequate space and permissions for the
  # node process.
  #
  # type: string
  # env var: LOTUS_FAULTREPORTER_CONSENSUSFAULTREPORTERDATADIR
  #ConsensusFaultReporterDataDir = ""

  # ConsensusFaultReporterAddress is the wallet address used for submitting
  # ReportConsensusFault messages. It will pay for gas fees, and receive any
  # rewards. This address should have adequate funds to cover gas fees.
  #
  # type: string
  # env var: LOTUS_FAULTREPORTER_CONSENSUSFAULTREPORTERADDRESS
  #ConsensusFaultReporterAddress = ""


