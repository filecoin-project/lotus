package message

import (
	"fmt"
	"io"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

/* This file was generated by github.com/whyrusleeping/cbor-gen */

var _ = xerrors.Errorf

func (t *TransferRequest) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{137,}); err != nil {
		return err
	}

	// t.t.XferID (uint64)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajUnsignedInt, t.XferID)); err != nil {
		return err
	}

	// t.t.Pull (bool)
	if err := cbg.WriteBool(w, t.Pull); err != nil {
		return err
	}

	// t.t.Vouch ([]uint8)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.Vouch)))); err != nil {
		return err
	}
	if _, err := w.Write(t.Vouch); err != nil {
		return err
	}

	// t.t.PID ([]uint8)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.PID)))); err != nil {
		return err
	}
	if _, err := w.Write(t.PID); err != nil {
		return err
	}

	// t.t.Stor ([]uint8)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajByteString, uint64(len(t.Stor)))); err != nil {
		return err
	}
	if _, err := w.Write(t.Stor); err != nil {
		return err
	}

	// t.t.Part (bool)
	if err := cbg.WriteBool(w, t.Part); err != nil {
		return err
	}

	// t.t.Canc (bool)
	if err := cbg.WriteBool(w, t.Canc); err != nil {
		return err
	}

	// t.t.BCid (string)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len(t.BCid)))); err != nil {
		return err
	}
	if _, err := w.Write([]byte(t.BCid)); err != nil {
		return err
	}

	// t.t.VID (string)
	if _, err := w.Write(cbg.CborEncodeMajorType(cbg.MajTextString, uint64(len(t.VID)))); err != nil {
		return err
	}
	if _, err := w.Write([]byte(t.VID)); err != nil {
		return err
	}
	return nil
}


func (t *TransferRequest) UnmarshalCBOR(r io.Reader) error {
	br := cbg.GetPeeker(r)

	maj, extra, err := cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 9 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.t.XferID (uint64)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajUnsignedInt {
		return fmt.Errorf("wrong type for uint64 field")
	}
	t.XferID = extra
	// t.t.Pull (bool)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.Pull = false
	case 21:
		t.Pull = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.t.Vouch ([]uint8)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if extra > 8192 {
		return fmt.Errorf("t.Vouch: array too large (%d)", extra)
	}

	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.Vouch = make([]byte, extra)
	if _, err := io.ReadFull(br, t.Vouch); err != nil {
		return err
	}
	// t.t.PID ([]uint8)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if extra > 8192 {
		return fmt.Errorf("t.PID: array too large (%d)", extra)
	}

	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.PID = make([]byte, extra)
	if _, err := io.ReadFull(br, t.PID); err != nil {
		return err
	}
	// t.t.Stor ([]uint8)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if extra > 8192 {
		return fmt.Errorf("t.Stor: array too large (%d)", extra)
	}

	if maj != cbg.MajByteString {
		return fmt.Errorf("expected byte array")
	}
	t.Stor = make([]byte, extra)
	if _, err := io.ReadFull(br, t.Stor); err != nil {
		return err
	}
	// t.t.Part (bool)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.Part = false
	case 21:
		t.Part = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.t.Canc (bool)

	maj, extra, err = cbg.CborReadHeader(br)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.Canc = false
	case 21:
		t.Canc = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.t.BCid (string)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		t.BCid = string(sval)
	}
	// t.t.VID (string)

	{
		sval, err := cbg.ReadString(br)
		if err != nil {
			return err
		}

		t.VID = string(sval)
	}
	return nil
}

